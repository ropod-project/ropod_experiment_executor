#!/usr/bin/env python
import os

import rospy
import actionlib
from ropod_ros_msgs.msg import ExecuteExperimentAction, ExecuteExperimentResult
from ropod_ros_msgs.msg import Transition, TransitionList

from experiment_executor.experiment_config.sm_loader import SMLoader
from ropod_experiment_executor.state_machine_creator import StateMachine

class ExperimentExecutorInterface(object):
    def __init__(self):
        self.experiment_config_path = rospy.get_param('~experiment_config_path', '')
        experiment_transition_topic = rospy.get_param('~experiment_transition_topic',
                                                      '/ropod/transition_list')

        self.experiment_server = actionlib.SimpleActionServer('experiment_server',
                                                              ExecuteExperimentAction,
                                                              self.execute_experiment,
                                                              False)
        self.experiment_server.start()

        self.transition_pub = rospy.Publisher(experiment_transition_topic,
                                              TransitionList,
                                              queue_size=1)
        self.experiment_feedback_msg = ExecuteExperimentResult()

    def execute_experiment(self, goal):
        '''
        :msg: ExecuteExperiment
        :returns: None
        '''
        sm_config_file = os.path.join(self.experiment_config_path, goal.experiment_type + '.toml')
        if not os.path.isfile(sm_config_file):
            print('[experiment_executor] Received an unknown experiment request:',
                  ' {0}'.format(goal.experiment_type))
            print('[experiment_executor] Ignoring request')
            return

        experiment_data = SMLoader.load_sm(sm_config_file)
        self._publish_state_transitions(experiment_data)
        state_machine = StateMachine(experiment_data, self.experiment_server)
        result = state_machine.execute()

        self.experiment_feedback_msg.stamp = rospy.Time.now()
        self.experiment_feedback_msg.experiment_type = goal.experiment_type
        if result and result == 'DONE':
            self.experiment_feedback_msg.result = ExecuteExperimentResult.FINISHED
        else:
            self.experiment_feedback_msg.result = ExecuteExperimentResult.FAILED
        self.experiment_server.set_succeeded(self.experiment_feedback_msg)

    def _publish_state_transitions(self, experiment_data):
        """Get the transitions and publish them.

        :state_machine_params: StateMachineParams
        :returns: None

        """
        transitions = []
        for state_name, state_param in experiment_data.state_params.items():
            for transition_name, target_state in state_param.transitions.items():
                transitions.append(Transition(source=state_name.encode("utf-8"),
                                              target=target_state.encode("utf-8"),
                                              name=transition_name.encode("utf-8")))
        self.transition_pub.publish(TransitionList(transitions=transitions))


if __name__ == '__main__':
    rospy.init_node('experiment_executor')
    EXECUTOR_INTERFACE = ExperimentExecutorInterface()
    rospy.spin()
